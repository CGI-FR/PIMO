#!/bin/bash

# Color codes
red='\033[0;31m'
yellow='\033[0;33m'
blue='\033[0;34m'
green='\033[0;32m'
NC='\033[0m' # No colors

printf "\n"

if ! [[ $(cat "$1") =~ ^((chore|docs|feat|fix|perf|refactor|style|ci|test)(\([a-zA-Z0-9]+\))?:|Merge\ pull) ]]; then
  printf "Please use semantic commit messages\n\n"
  printf "       /â€¾â€¾â€¾â€¾â€¾â€¾â€¾â€¾\n"
  printf "  ðŸ˜¼  <  Meow! Please use semantic commit messages\n"
  printf "       \________\n\n"
  printf "  ${yellow}<type>${NC}[${green}(<scope>)${NC}]: ${blue}<short summary>${NC}\n"
  printf "${yellow}     â”‚${green}      â”‚             ${blue}â”‚\n"
  printf "${yellow}     â”‚${green}      â”‚             ${blue}â””â”€> Summary in present tense. Not capitalized. No period at the end. \n"
  printf "${yellow}     â”‚${green}      â”‚\n"
  printf "${yellow}     â”‚${green}      â””â”€> Scope: common|compiler|authentication|core|\n"
  printf "${yellow}     â”‚                                                                                          \n"
  printf "${yellow}     â””â”€> Type: chore, docs, feat, fix, perf, refactor, style, ci, or test.${NC}\n"
  printf "\n"
  printf "example : chore(githooks): add semantic commit check\n"
  exit 1
fi

while read -r line; do
  # Skip comments
  if [ "${line:0:1}" == "#" ]; then
      continue
  fi
  if [ ${#line} -gt 72 ]; then
    echo -e "${yellow}Commit messages are limited to 72 characters.${NC}"
    echo -e "The following commit message has ${red}${#line}${NC} characters."
    echo "${line}"
    exit 1
  fi
  done < "${1}"
exit 0
