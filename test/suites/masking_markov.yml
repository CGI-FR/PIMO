name: markov features
testcases:
- name: markov generation
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "comment"
          mask:
            markov:
              max-size: 20
              sample: "file://../sample.txt"
              separator: " "
      EOF
  - script: |-
      echo '{"comment":""}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.comment ShouldBeIn "I need a cheese cake" "I want a cheese cake" "I need a cheese burger" "I want a cheese burger"
    - result.systemerr ShouldBeEmpty

- name: markov should not always mask the same way
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "comment"
          mask:
            markov:
              max-size: 20
              sample: "file://../sample.txt"
              separator: " "
      EOF
  - script: |-
      echo '{"comment": ""}' | pimo --repeat=10 > first.txt
  - script: |-
      echo '{"comment": ""}' | pimo --repeat=10 > second.txt
  - script: |-
      diff first.txt second.txt
    assertions:
    - result.systemout ShouldNotBeEmpty
  - script: rm -f first.txt
  - script: rm -f second.txt

# TODO: There is a bug with markiv mask and seeds
# - name: markov generation with seeder
#   steps:
#   - script: rm -f masking.yml
#   - script: |-
#       cat > masking.yml <<EOF
#       version: "1"
#       masking:
#         - selector:
#             jsonpath: "name"
#           mask:
#             markov:
#               max-size: 20
#               sample: "pimo://nameFR"
#           seed:
#             field: "name"
#       EOF
#   - script: |-
#       echo -e '{"name":1}\n{"name":2}\n{"name":3}\n{"name":2}\n{"name":1}\n{"name":3}' | pimo | head -c -1 | tr '\n' ' '
#     assertions:
#     - result.code ShouldEqual 0
#     - result.systemout ShouldEqual {"name":"Salin"} {"name":"Jacine"} {"name":"Lilbernastine"} {"name":"Jacine"} {"name":"Salin"} {"name":"Lilbernastine"}
#     - result.systemerr ShouldBeEmpty
