name: cache features
testcases:
- name: declaring cache
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "surname"
          mask:
            incremental:
                start: 5
                increment: 2
          cache: "surname"
      caches:
        "surname" : {}

      EOF
  - script: |-
      echo '{"surname": "Toto", "name": "Benjamin"}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldEqual Benjamin
    - result.systemerr ShouldBeEmpty
    - result.systemout ShouldNotContainSubstring Toto

- name: save cache
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "id"
          mask:
            incremental:
                start: 5
                increment: 2
          cache: "id"
        - selector:
            jsonpath: "id"
          mask:
            replacement: "id"
          cache: "name"
      caches:
        id : {}
        name : {}

      EOF
  - script: |-
      pimo --dump-cache id=./id.jsonl <<EOF
      {"name": "Toto", "id": 12}
      {"name": "Dorothy", "id":3}
      {"name": "Toto2", "id":12}
      {"name": "Dorothy4", "id":3}
      EOF
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring "name":"Toto","id":5
    - result.systemout ShouldContainSubstring "name":"Dorothy","id":7
    - result.systemout ShouldContainSubstring "name":"Toto2","id":5
    - result.systemout ShouldContainSubstring "name":"Dorothy4","id":7
    - result.systemerr ShouldBeEmpty
  - script: cat id.jsonl
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring {"key":12,"value":5}
    - result.systemout ShouldContainSubstring {"key":3,"value":7}

- name: Load cache
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "id"
          mask:
            incremental:
                start: 5
                increment: 2
          cache: "id"

      caches:
        id : {}

      EOF
  - script: |-
      cat > id.jsonl <<EOF
      {"key": 12, "value": 21}
      {"key": 3, "value":8}
      {"key": 4, "value":10}
      EOF
  - script: |-
      pimo --load-cache id=./id.jsonl <<EOF
      {"name": "Toto", "id": 12}
      {"name": "Dorothy", "id":3}
      {"name": "Toto2", "id":12}
      {"name": "Dorothy4", "id":3}
      EOF
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring "name":"Toto","id":21
    - result.systemout ShouldContainSubstring "name":"Dorothy","id":8
    - result.systemout ShouldContainSubstring "name":"Toto2","id":21
    - result.systemout ShouldContainSubstring "name":"Dorothy4","id":8
    - result.systemerr ShouldBeEmpty

- name: using cache
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "id"
          mask:
            incremental:
                start: 5
                increment: 2
          cache: "id"

      caches:
        id : {}

      EOF
  - script: |-
      pimo <<EOF
      {"name": "Toto", "id": 12}
      {"name": "Dorothy", "id":3}
      {"name": "Toto2", "id":12}
      {"name": "Dorothy4", "id":3}
      EOF
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring "name":"Toto","id":5
    - result.systemout ShouldContainSubstring "name":"Dorothy","id":7
    - result.systemout ShouldContainSubstring "name":"Toto2","id":5
    - result.systemout ShouldContainSubstring "name":"Dorothy4","id":7
    - result.systemerr ShouldBeEmpty

- name: undefined cache
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "id"
          mask:
            incremental:
                start: 5
                increment: 2
          cache: "not defined"

      caches:
        id : {}

      EOF
  - script: |-
      echo '{"name": "Toto", "id": 12}\n{"name": "Dorothy", "id":3}\n{"name": "Toto2", "id":12}' | pimo
    assertions:
    - result.code ShouldEqual 1
    - result.systemerr ShouldContainSubstring "Cache 'not defined' not found for 'id'"
    - result.systemout ShouldBeEmpty

- name: using unique cache
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 1
      masking:
        - selector:
            jsonpath: "name"
          mask:
            randomChoice:
              - "Marcel"
              - "Mickael"
              - "Mathieu"
          cache: "name"

      caches:
        name :
          unique: true

      EOF
  - script: |-
      pimo <<EOF
      {"name": "Toto", "id": 1}
      {"name": "Dorothy", "id":2}
      {"name": "Toto", "id":3}
      {"name": "Dorothy", "id":4}
      {"name": "Justine", "id":5}
      {"name": "Justine", "id":6}
      EOF
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring "name":"Marcel","id":1
    - result.systemout ShouldContainSubstring "name":"Mickael","id":2
    - result.systemout ShouldContainSubstring "name":"Marcel","id":3
    - result.systemout ShouldContainSubstring "name":"Mickael","id":4
    - result.systemout ShouldContainSubstring "name":"Mathieu","id":5
    - result.systemout ShouldContainSubstring "name":"Mathieu","id":6
    - result.systemerr ShouldBeEmpty

- name: no error when no more value for cache
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 1
      masking:
        - selector:
            jsonpath: "name"
          mask:
            randomChoice:
              - "Mickael"
              - "Mathieu"
              - "Marcel"
          cache: "name"

      caches:
        name :

      EOF
  - script: |-
      pimo <<EOF
      {"name": "Toto", "id": 1}
      {"name": "Dorothy", "id":2}
      {"name": "Toto", "id":3}
      {"name": "Dorothy", "id":4}
      {"name": "Justine", "id":5}
      {"name": "Justine", "id":6}
      {"name": "NoMore", "id":7}
      EOF
    assertions:
    - result.code ShouldEqual 0
    - result.systemerr ShouldBeEmpty

- name: error when no more value for unique cache
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 1
      masking:
        - selector:
            jsonpath: "name"
          mask:
            randomChoice:
              - "Mickael"
              - "Mathieu"
              - "Marcel"
          cache: "name"

      caches:
        name :
          unique: true

      EOF
  - script: |-
      pimo <<EOF
      {"name": "Toto", "id": 1}
      {"name": "Dorothy", "id":2}
      {"name": "Toto", "id":3}
      {"name": "Dorothy", "id":4}
      {"name": "Justine", "id":5}
      {"name": "Justine", "id":6}
      {"name": "NoMore", "id":7}
      EOF
    assertions:
    - result.code ShouldEqual 4
    - result.systemerr ShouldContainSubstring "Unique value not found"

- name: masking with value from cache
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 1
      masking:
        - selector:
            jsonpath: "name"
          mask:
            randomChoice:
              - "Marcel"
              - "Mickael"
              - "Mathieu"
          cache: "name"
        - selector:
            jsonpath: "supervisor"
          mask:
            fromCache: "name"
      caches:
        name :
          unique: true

      EOF
  - script: |-
      pimo <<EOF
      {"name": "Toto", "id": 1, "supervisor" : "Dorothy" }
      {"name": "Justine", "id":5, "supervisor" : "Justine"}
      {"name": "Dorothy", "id":2, "supervisor" : "Justine"}
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring '{"name":"Marcel","id":1,"supervisor":"Mathieu"}'
    - result.systemout ShouldContainSubstring '{"name":"Mickael","id":5,"supervisor":"Mickael"}'
    - result.systemout ShouldContainSubstring '{"name":"Mathieu","id":2,"supervisor":"Mickael"}'

    - result.systemerr ShouldBeEmpty

- name: masking with other key
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 1
      masking:
        - selector:
            jsonpath: "name"
          mask:
            replacement: "id"
        - selector:
            jsonpath: "name"
          mask:
            randomChoice:
              - "Marcel"
              - "Mickael"
              - "Mathieu"
          cache: "name"
      caches:
        name :
          unique: true

      EOF
  - script: sed -i  "s/\[\[/\{\{/g"  masking.yml
  - script: sed -i  "s/\]\]/\}\}/g"  masking.yml
  - script: |-
      pimo --dump-cache name=name.jsonl <<EOF
      {"name": "Toto", "id": 1 }
      {"name": "Justine", "id":5}
      {"name": "Dorothy", "id":2}
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring '{"name":"Marcel","id":1}'
    - result.systemout ShouldContainSubstring '{"name":"Mickael","id":5}'
    - result.systemout ShouldContainSubstring '{"name":"Mathieu","id":2}'

    - result.systemerr ShouldBeEmpty
  - script: cat name.jsonl
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring {"key":1,"value":"Marcel"}
    - result.systemout ShouldContainSubstring {"key":5,"value":"Mickael"}
    - result.systemout ShouldContainSubstring {"key":2,"value":"Mathieu"}

- name: masking with other key
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 1
      masking:
        - selector:
            jsonpath: "PRENOM"
          mask:
            add: ""
        - selector:
            jsonpath: "PRENOM"
          mask:
            replacement: "MATRI"
        - selector:
            jsonpath: "PRENOM"
          mask:
            randomChoice:
              - "Mickael"
              - "Mathieu"
              - "Marcel"
          cache: "name"
      caches:
        name :
          unique: true

      EOF
  - script: |-
      pimo --dump-cache name=name.jsonl <<EOF
      {"MATRI": "FTTO4452" }
      {"MATRI":"FJUS4442"}
      {"MATRI":"FDDO8965"}
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring {"MATRI":"FTTO4452","PRENOM":"Marcel"}
    - result.systemout ShouldContainSubstring {"MATRI":"FJUS4442","PRENOM":"Mickael"}
    - result.systemout ShouldContainSubstring {"MATRI":"FDDO8965","PRENOM":"Mathieu"}

    - result.systemerr ShouldBeEmpty
  - script: cat name.jsonl
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring {"key":"FDDO8965","value":"Mathieu"}
    - result.systemout ShouldContainSubstring {"key":"FTTO4452","value":"Marcel"}
    - result.systemout ShouldContainSubstring {"key":"FJUS4442","value":"Mickael"}

- name: line not removed if key not present in json
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 1
      masking:
        - selector:
            jsonpath: "name"
          mask:
            fromCache: mycache
      caches:
        mycache : {}
      EOF
  - script: |-
      echo '{"othervalue":18}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldEqual {"othervalue":18}

- name: use reverse cache
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 1
      masking:
        - selector:
            jsonpath: "category"
          mask:
            fromCache: "cat"
      caches:
        cat:
          unique: true
          reverse: true
      EOF
  - script: |-
      cat > cat.jsonl <<EOF
      {"key": "Animal", "value": 1}
      {"key": "Food", "value": 2}
      {"key": "IT", "value": 3}
      EOF
  - script: |-
      pimo --load-cache cat=./cat.jsonl <<EOF
      {"nb_word": 148, "category" : 1}
      {"nb_word": 419, "category" : 3}
      {"nb_word": 377, "category" : 2}
      EOF
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring '{"nb_word":148,"category":"Animal"}'
    - result.systemout ShouldContainSubstring '{"nb_word":419,"category":"IT"}'
    - result.systemout ShouldContainSubstring '{"nb_word":377,"category":"Food"}'

    - result.systemerr ShouldBeEmpty

- name: save reverse cache
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 1
      masking:
        - selector:
            jsonpath: "PRENOM"
          mask:
            add: ""
        - selector:
            jsonpath: "PRENOM"
          mask:
            replacement: "MATRI"
        - selector:
            jsonpath: "PRENOM"
          mask:
            randomChoice:
              - "Mickael"
              - "Mathieu"
              - "Marcel"
          cache: "name"
      caches:
        name :
          unique: true
          reverse: true

      EOF
  - script: |-
      pimo --dump-cache name=reverseName.jsonl <<EOF
      {"MATRI": "FTTO4452" }
      {"MATRI":"FJUS4442"}
      {"MATRI":"FDDO8965"}
    assertions:
    - result.systemerr ShouldBeEmpty
  - script: cat reverseName.jsonl
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring {"key":"Mathieu","value":"FDDO8965"}
    - result.systemout ShouldContainSubstring {"key":"Marcel","value":"FTTO4452"}
    - result.systemout ShouldContainSubstring {"key":"Mickael","value":"FJUS4442"}

- name: bug fromCache with calculated value 1
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 42
      masking:
        - selector:
            jsonpath: "sexe"
          masks:
            - constant: 2
            - fromCache: "cacheSex"

      caches:
        cacheSex :
          unique: true
          reverse:  true
      EOF
  - script: |-
      cat > cacheSex.jsonl <<EOF
      {"key": "M", "value": 2}
      {"key": "F", "value": 1}
      EOF
  - script: |-
      pimo --load-cache cacheSex=./cacheSex.jsonl <<EOF
      {"sexe": 2.4}
      EOF
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring '{"sexe":"M"}'
    - result.systemerr ShouldBeEmpty

- name: bug fromCache with calculated value 2
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat  > masking.yml <<EOF
      version: "1"
      seed: 42
      masking:
        - selector:
            jsonpath: "sexe"
          masks:
            - template : '[[ round (toString .sexe) 0  ]]'
            - fromjson: "sexe"
            - fromCache: "cacheSex"
      caches:
        cacheSex :
          unique: true
          reverse:  true
      EOF
  - script: sed -i  "s/\[\[/\{\{/g"  masking.yml
  - script: sed -i  "s/\]\]/\}\}/g"  masking.yml
  - script: |-
      cat > cacheSex.jsonl <<EOF
      {"key": "M", "value": 2}
      {"key": "F", "value": 1}
      EOF
  - script: |-
      pimo --load-cache cacheSex=./cacheSex.jsonl <<EOF
      {"sexe": 2.4}
      EOF
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring '{"sexe":"M"}'
    - result.systemerr ShouldBeEmpty
