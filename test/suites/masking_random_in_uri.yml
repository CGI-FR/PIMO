name: random in uri features
testcases:
- name: random mask
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            randomChoiceInUri: "file://../names.txt"
      EOF
  - script: |-
      echo '{"name": "Toto"}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldNotEqual Toto
    - result.systemoutjson.name ShouldBeIn Mickael Marc Benjamin
    - result.systemerr ShouldBeEmpty

- name: muliple random in uri with same source mask
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 3
      masking:
        - selector:
            jsonpath: "name"
          mask:
            randomChoiceInUri: "file://../names.txt"
        - selector:
            jsonpath: "name2"
          mask:
            randomChoiceInUri: "file://../names.txt"
      EOF
  - script: |-
      echo '{"name": "Toto", "name2": ""}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldNotEqual Toto
    - result.systemoutjson.name ShouldEqual Mickael
    - result.systemoutjson.name2 ShouldEqual Marc
    - result.systemerr ShouldBeEmpty

- name: random in uri with templated uri
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 3
      masking:
        - selector:
            jsonpath: "name"
          mask:
            randomChoiceInUri: "file://../names_{{.gender}}.txt"
      EOF
  - script: |-
      cat > input <<EOF
      {"name": "Toto", "gender": "F"}
      {"name": "Toto", "gender": "M"}
      EOF
  - script: |-
      pimo < input | head -n 1
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldNotEqual Toto
    - result.systemoutjson.name ShouldEqual Marie
    - result.systemerr ShouldBeEmpty

  - script: |-
      pimo < input| tail -n 1
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldNotEqual Toto
    - result.systemoutjson.name ShouldEqual Benjamin
    - result.systemerr ShouldBeEmpty

- name: random choice in uri with seeder
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            randomChoiceInUri: "file://../names.txt"
          seed:
            field: "name"
      EOF
  - script: |-
      echo -e '{"name":1}\n{"name":2}\n{"name":3}\n{"name":2}\n{"name":1}\n{"name":3}' | pimo | head -c -1 | tr '\n' ' '
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldEqual {"name":"Mickael"} {"name":"Marc"} {"name":"Mickael"} {"name":"Marc"} {"name":"Mickael"} {"name":"Mickael"}
    - result.systemerr ShouldBeEmpty
