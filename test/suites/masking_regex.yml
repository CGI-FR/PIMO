name: Regex features
testcases:
- name: regex mask
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            regex: "[A-Z]oto([a-z]){3}"
      EOF
  - script: |-
      echo '{"name": "Benjamin"}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldContainSubstring oto
    - result.systemerr ShouldBeEmpty
- name: regex should not always mask the same way
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            regex: "[A-Z]oto([a-z]){3}"
      EOF
  - script: |-
      echo '{"name": "Benjamin"}' | pimo --repeat=10 > first.txt
  - script: |-
      echo '{"name": "Benjamin"}' | pimo --repeat=10 > second.txt
  - script: |-
      diff first.txt second.txt
    assertions:
    - result.systemout ShouldNotBeEmpty
  - script: rm -f first.txt
  - script: rm -f second.txt

- name: muliple regex with same source mask
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 3
      masking:
        - selector:
            jsonpath: "name"
          mask:
            regex: "[a-z]{10}"
        - selector:
            jsonpath: "name2"
          mask:
            regex: "[a-z]{10}"
      EOF
  - script: |-
      echo '{"name": "Toto", "name2": ""}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldNotEqual eueewuiylx
    - result.systemoutjson.name ShouldEqual asxepgqubb
    - result.systemoutjson.name2 ShouldNotEqual eueewuiylx
    - result.systemoutjson.name2 ShouldEqual axfmifkszn
    - result.systemerr ShouldBeEmpty

- name: regex with seeder
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            regex: "[a-z]{5}"
          seed:
            field: "name"
      EOF
  - script: |-
      echo -e '{"name":1}\n{"name":2}\n{"name":3}\n{"name":2}\n{"name":1}\n{"name":3}' | pimo | head -c -1 | tr '\n' ' '
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldEqual {"name":"dirov"} {"name":"proud"} {"name":"weubj"} {"name":"proud"} {"name":"dirov"} {"name":"weubj"}
    - result.systemerr ShouldBeEmpty
