name: random int features
testcases:
- name: random int
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "age"
          mask:
            randomInt:
              min: 25
              max: 35
      EOF
  - script: |-
      echo '{"age": 38}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.age ShouldNotEqual 38
    - result.systemoutjson.age ShouldBeBetweenOrEqual 25 35
    - result.systemerr ShouldBeEmpty
- name: random int should not always mask the same way
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "age"
          mask:
            randomInt:
              min: 25
              max: 35
      EOF
  - script: |-
      echo '{"age": "38"}' | pimo --repeat=10 > first.txt
  - script: |-
      echo '{"age": "38"}' | pimo --repeat=10 > second.txt
  - script: |-
      diff first.txt second.txt
    assertions:
    - result.systemout ShouldNotBeEmpty
  - script: rm -f first.txt
  - script: rm -f second.txt

- name: muliple random int with same source mask
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 3
      masking:
        - selector:
            jsonpath: "name"
          mask:
            randomInt:
              min: 0
              max: 100
        - selector:
            jsonpath: "name2"
          mask:
            randomInt:
              min: 0
              max: 100
      EOF
  - script: |-
      echo '{"name": "Toto", "name2": ""}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldNotEqual 83
    - result.systemoutjson.name ShouldEqual 27
    - result.systemoutjson.name2 ShouldNotEqual 83
    - result.systemoutjson.name2 ShouldEqual 55
    - result.systemerr ShouldBeEmpty

- name: random int with seeder
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "age"
          mask:
            randomInt:
              min: 0
              max: 100
          seed:
            field: "age"
      EOF
  - script: |-
      echo -e '{"age":1}\n{"age":2}\n{"age":3}\n{"age":2}\n{"age":1}\n{"age":3}' | pimo | head -c -1 | tr '\n' ' '
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldEqual {"age":44} {"age":39} {"age":60} {"age":39} {"age":44} {"age":60}
    - result.systemerr ShouldBeEmpty
