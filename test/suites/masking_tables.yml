name: table masking features
testcases:
- name: table mask
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            constant: "Dorothy"
      EOF
  - script: |-
      echo '{"name": ["Toto","Tata"]}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring ["Dorothy","Dorothy"]
    - result.systemerr ShouldBeEmpty

- name: table mask
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "client.name"
          mask:
            constant: "Dorothy"
      EOF
  - script: |-
      echo '{ "client" : {"name": ["Toto","Tata"]} }' | pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemout ShouldContainSubstring {"client":{"name":["Dorothy","Dorothy"]}}
    - result.systemerr ShouldBeEmpty

- name: table object mask
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "client.name"
          mask:
            constant: "Dorothy"
      EOF
  - script: |-
      echo '{ "client" : [ {"name": "Toto"}, { "name" : "Tata"} ]}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - >
      result.systemout ShouldContainSubstring {"client":[{"name":"Dorothy"},{"name":"Dorothy"}]}
    - result.systemerr ShouldBeEmpty

- name: nested arrays
  steps:
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 42
      masking:
        - selector:
            jsonpath: "elements.persons.phonenumber"
          mask:
            regex: "0[1-7]( ([0-9]){2}){4}"
      EOF
  - script: |-
      echo '{"elements":[{"persons": [{"phonenumber": "027"}]}]}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - >
      result.systemout ShouldContainSubstring {"elements":[{"persons":[{"phonenumber":"04 87 48 09 96"}]}]}
    - result.systemerr ShouldBeEmpty

- name: multiple nested arrays
  steps:
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 42
      masking:
        - selector:
            jsonpath: "elements.persons.phonenumber"
          mask:
            regex: "0[1-7]( ([0-9]){2}){4}"
        - selector:
            jsonpath: "elements.persons.email"
          mask:
            regex: '[a-z]{10}@company\.com'
      EOF
  - script: |-
      echo '{"elements":[{"persons": [{"phonenumber": "027","email": "person@company.com"}]}]}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - >
      result.systemout ShouldContainSubstring {"elements":[{"persons":[{"phonenumber":"04 87 48 09 96","email":"agcarobxcc@company.com"}]}]}
    - result.systemerr ShouldBeEmpty

- name: multiple nested arrays 2
  steps:
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      seed: 42
      masking:
        - selector:
            jsonpath: "elements.persons.phonenumber"
          mask:
            incremental:
              start: 1
              increment: 1
      EOF
  - script: |-
      echo '{"elements":[{"persons": [{"phonenumber": "001"},{"phonenumber": "002"}]},{"persons": [{"phonenumber": "003"},{"phonenumber": "004"}]}]}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - >
      result.systemout ShouldContainSubstring {"elements":[{"persons":[{"phonenumber":1},{"phonenumber":2}]},{"persons":[{"phonenumber":3},{"phonenumber":4}]}]}
    - result.systemerr ShouldBeEmpty
