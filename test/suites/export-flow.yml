name: flow chart feature
testcases:
  - name: export mermaid
    steps:
      - script: rm -f masking.yml
      - script: |-
          cat > masking.yml <<EOF
          version: "1"
          masking:
            - selector:
                jsonpath: "name"
              mask:
                add: "toto"
          EOF
      - script: pimo flow > masking.mmd
        assertions:
          - result.code ShouldEqual 0
      - script: |-
          cat > expected.mmd <<EOF
          flowchart LR
              !add[/Add/] --> name
              subgraph name_sg
                  name -->|"Add(toto)"| name_1
              end
              name_1 --> !output>Output]
          EOF
      - script: diff masking.mmd expected.mmd
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldBeEmpty

  - name: export mermaid multiple masks
    steps:
      - script: rm -f masking.yml
      - script: |-
          cat > masking.yml <<EOF
          version: "1"
          masking:
            - selector:
                jsonpath: "name"
              masks:
                - add: ""
                - template: "hello {{.input}}"
          EOF
      - script: pimo flow >  masking.mmd
        assertions:
          - result.code ShouldEqual 0
      - script: |-
          cat > expected.mmd <<EOF
          flowchart LR
              !add[/Add/] --> name
              !input[(input)] --> input
              subgraph name_sg
                  name -->|"Template(hello {{.input}})"| name_1
                  input -->|"Template(hello {{.input}})"| name_1
              end
              name_1 --> !output>Output]
          EOF
      - script: diff masking.mmd expected.mmd
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldBeEmpty

  - name: export multiple maskings
    steps:
      - script: rm -f masking.yml
      - script: |-
          cat > masking.yml <<EOF
          version: "1"
          seed: 42
          masking:
            - selector:
                jsonpath: "name"
              mask:
                hashInUri: "pimo://nameFR"
            - selector:
                jsonpath: "familyName"
              mask:
                hashInUri: "pimo://surnameFR"
            - selector:
                jsonpath: "domaine"
              masks:
                - add: ""
                - randomChoice:
                  - "gmail.com"
                  - "msn.com"
            - selector:
                jsonpath: "email"
              mask:
                template: "{{.name}}.{{.familyName}}@{{.domaine}}"
            - selector:
                jsonpath: "domaine"
              mask:
                remove: true
          EOF
      - script: pimo flow > masking.mmd
        asertions:
          - result.code ShouldEqual 0
      - script: |-
          cat > expected.mmd <<EOF
          flowchart LR
              !input[(input)] --> name
              !input[(input)] --> familyName
              !add[/Add/] --> domaine
              !input[(input)] --> email
              subgraph name_sg
                  name -->|"HashInURI(pimo://nameFR)"| name_1
              end
              subgraph familyName_sg
                  familyName -->|"HashInURI(pimo://surnameFR)"| familyName_1
              end
              subgraph domaine_sg
                  domaine -->|"RandomChoice(gmail.com,msn.com)"| domaine_1
              end
              subgraph email_sg
                  email -->|"Template({{.name}}.{{.familyName}}@{{.domaine}})"| email_1
                  name_1 -->|"Template({{.name}}.{{.familyName}}@{{.domaine}})"| email_1
                  familyName_1 -->|"Template({{.name}}.{{.familyName}}@{{.domaine}})"| email_1
                  domaine_1 -->|"Template({{.name}}.{{.familyName}}@{{.domaine}})"| email_1
              end
              name_1 --> !output>Output]
              familyName_1 --> !output>Output]
              domaine_1 --> !remove[\Remove\]
              email_1 --> !output>Output]
          EOF
      - script: diff masking.mmd expected.mmd
        assertions:
          - result.code ShouldEqual 0
          - result.systemout ShouldBeEmpty
