name: fpe features
testcases:
- name: ff1 mask encrypt with tweak
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            ff1:
              radix: 62
              keyFromEnv: "FF1_ENCRYPTION_KEY"
              tweakField: "tweak"
      EOF
  - script: |-
      echo '{"name": "Toto", "tweak": "mytweak"}' | FF1_ENCRYPTION_KEY="70NZ2NWAqk9/A21vBPxqlA==" pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldEqual nhIy
    - result.systemoutjson ShouldContainKey tweak
    - result.systemerr ShouldBeEmpty

- name: ff1 mask encrypt without tweak
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            ff1:
              radix: 62
              keyFromEnv: "FF1_ENCRYPTION_KEY"
              tweakField: "tweak"
      EOF
  - script: |-
      echo '{"name": "Toto"}' | FF1_ENCRYPTION_KEY="70NZ2NWAqk9/A21vBPxqlA==" pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldEqual Uaow
    - result.systemerr ShouldBeEmpty

- name: ff1 mask encrypt with empty tweak
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            ff1:
              radix: 62
              keyFromEnv: "FF1_ENCRYPTION_KEY"
              tweakField: "tweak"
      EOF
  - script: |-
      echo '{"name": "Toto", "tweak": ""}' | FF1_ENCRYPTION_KEY="70NZ2NWAqk9/A21vBPxqlA==" pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldEqual Uaow
    - result.systemoutjson ShouldContainKey tweak
    - result.systemerr ShouldBeEmpty

- name: ff1 mask decrypt with tweak
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            ff1:
              radix: 62
              keyFromEnv: "FF1_ENCRYPTION_KEY"
              tweakField: "tweak"
              decrypt: true
      EOF
  - script: |-
      echo '{"name": "nhIy", "tweak": "mytweak"}' | FF1_ENCRYPTION_KEY="70NZ2NWAqk9/A21vBPxqlA==" pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldEqual Toto
    - result.systemoutjson ShouldContainKey tweak
    - result.systemerr ShouldBeEmpty

- name: ff1 mask decrypt without tweak
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            ff1:
              radix: 62
              keyFromEnv: "FF1_ENCRYPTION_KEY"
              tweakField: "tweak"
              decrypt: true
      EOF
  - script: |-
      echo '{"name": "Uaow"}' | FF1_ENCRYPTION_KEY="70NZ2NWAqk9/A21vBPxqlA==" pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldEqual Toto
    - result.systemerr ShouldBeEmpty

- name: ff1 mask encrypt with empty encryption key
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            ff1:
              radix: 62
              keyFromEnv: "FF1_ENCRYPTION_KEY"
              tweakField: "tweak"
      EOF
  - script: |-
      echo '{"name": "Toto", "tweak": "mytweak"}' | FF1_ENCRYPTION_KEY="" pimo
    assertions:
    - result.code ShouldEqual 4
    - |-
      result.systemerr ShouldContainSubstring "Environment variable named 'FF1_ENCRYPTION_KEY' should be defined"

- name: ff1 mask encrypt with no encryption key
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            ff1:
              radix: 62
              keyFromEnv: "FF1_ENCRYPTION_KEY"
              tweakField: "tweak"
      EOF
  - script: unset FF1_ENCRYPTION_KEY
  - script: |-
      echo '{"name": "Toto", "tweak": "mytweak"}' | pimo
    assertions:
    - result.code ShouldEqual 4
    - |-
      result.systemerr ShouldContainSubstring "Environment variable named 'FF1_ENCRYPTION_KEY' should be defined"

- name: ff1 mask encrypt with encryption key not valid
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            ff1:
              radix: 62
              keyFromEnv: "FF1_ENCRYPTION_KEY"
              tweakField: "tweak"
      EOF
  - script: |-
      echo '{"name": "Toto", "tweak": "mytweak"}' | FF1_ENCRYPTION_KEY="aHR0cDovL21hc3Rlcm1pbmRzLmdpdGh1Yi5pby9zcHJpZy8=" pimo
    assertions:
    - result.code ShouldEqual 4
    - |-
      result.systemerr ShouldContainSubstring "key length must be 128, 192, or 256 bits"

- name: custom domain
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            ff1:
              domain: "ABCD1234"
              keyFromEnv: "FF1_ENCRYPTION_KEY"
      EOF
  - script: |-
      echo '{"name": "1A2B3C4D"}' | FF1_ENCRYPTION_KEY="70NZ2NWAqk9/A21vBPxqlA==" pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldEqual B234BBA1
    - result.systemerr ShouldBeEmpty
  - script: |-
      echo '{"name": "12345678"}' | FF1_ENCRYPTION_KEY="70NZ2NWAqk9/A21vBPxqlA==" pimo
    assertions:
    - result.code ShouldEqual 4
    - |-
      result.systemerr ShouldContainSubstring "character 5 is outside of the domain ABCD1234"

- name: custom domain and preserve
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            ff1:
              domain: "ABCD1234"
              preserve: true
              keyFromEnv: "FF1_ENCRYPTION_KEY"
      EOF
  - script: |-
      echo '{"name": "1A2B-3C4D"}' | FF1_ENCRYPTION_KEY="70NZ2NWAqk9/A21vBPxqlA==" pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldEqual B234-BBA1
    - result.systemerr ShouldBeEmpty
  - script: |-
      echo '{"name": "1234-5678"}' | FF1_ENCRYPTION_KEY="70NZ2NWAqk9/A21vBPxqlA==" pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldEqual 3DC3-5678
    - result.systemerr ShouldBeEmpty

- name: on error
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            ff1:
              radix: 10
              onError: "Invalid value : {{.name}}"
              keyFromEnv: "FF1_ENCRYPTION_KEY"
      EOF
  - script: |-
      echo '{"name": "ABCD"}' | FF1_ENCRYPTION_KEY="70NZ2NWAqk9/A21vBPxqlA==" pimo
    assertions:
    - result.code ShouldEqual 0
    - |
      result.systemoutjson.name ShouldEqual "Invalid value : ABCD"
    - result.systemerr ShouldBeEmpty

- name: preserve specific domain
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      masking:
        - selector:
            jsonpath: "name"
          mask:
            ff1:
              domain: "ABCD1234"
              preserve: "8765-"
              keyFromEnv: "FF1_ENCRYPTION_KEY"
      EOF
  - script: |-
      echo '{"name": "1A2B-3C4D"}' | FF1_ENCRYPTION_KEY="70NZ2NWAqk9/A21vBPxqlA==" pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldEqual B234-BBA1
    - result.systemerr ShouldBeEmpty
  - script: |-
      echo '{"name": "1234-5678"}' | FF1_ENCRYPTION_KEY="70NZ2NWAqk9/A21vBPxqlA==" pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.name ShouldEqual 3DC3-5678
    - result.systemerr ShouldBeEmpty
