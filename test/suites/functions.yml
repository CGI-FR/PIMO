name: functions features
testcases:
- name: declaring fonctions and using in template
  steps:
  - script: rm -f masking.yml
  - script: |-
      cat > masking.yml <<EOF
      version: "1"
      functions:
        "add":
          params:
            "i": "int64"
          returns: "int64"
          body: |-
            return i + 10
      masking:
        - selector:
            jsonpath: "value"
          mask:
            template: '{{add 5}}'
      EOF
  - script: |-
      echo '{"value": "15"}' | pimo
    assertions:
    - result.code ShouldEqual 0
    - result.systemoutjson.value ShouldEqual 15
    - result.systemerr ShouldBeEmpty

# - name: declaring multiple fonctions and using in template
#   steps:
#   - script: rm -f masking.yml
#   - script: |-
#       cat > masking.yml <<EOF
#       version: "1"
#       functions:
#         "add":
#           params:
#             "i": "int64"
#           returns: "int64"
#           body: |-
#             return i + 10
#         "sub":
#           params:
#             "x": "int64"
#             "y": "int64"
#           returns: "int64"
#           body: |-
#             return x - y
#       masking:
#         - selector:
#             jsonpath: "addValue"
#           mask:
#             template: '{{add 5}}'
#         - selector:
#             jsonpath: "subValue"
#           mask:
#             template: '{{sub 10 5}}'
#       EOF
#   - script: |-
#       echo '{"value": "15"}' | pimo
#     assertions:
#     - result.code ShouldEqual 0
#     - result.systemoutjson.addValue ShouldEqual 15
#     - result.systemoutjson.subValue ShouldEqual 5
#     - result.systemerr ShouldBeEmpty

# - name: declaring fonctions and using in a mask without paramsFromContext
#   steps:
#   - script: rm -f masking.yml
#   - script: |-
#       cat > masking.yml <<EOF
#       version: "1"
#       functions: -|
#         func rangLettre(lettre) {
#           return lettre - 'A' + 1;
#         }
#       masking:
#         - selector:
#             jsonpath: "lettre"
#           mask:
#             call:
#               name: "rangLettre"
#       EOF
#   - script: |-
#       echo '{"lettre": "Z"}' | pimo
#     assertions:
#     - result.code ShouldEqual 0
#     - result.systemoutjson.rang_lettre ShouldEqual 26
#     - result.systemerr ShouldBeEmpty

# - name: declaring fonctions and using in a mask with paramsFromContext
#   steps:
#   - script: rm -f masking.yml
#   - script: |-
#       cat > masking.yml <<EOF
#       version: "1"
#       functions: -|
#         func create_email(nom, prenom) {
#           return nom+"."+prenom+"@mail.com";
#         }
#       masking:
#         - selector:
#             jsonpath: "email"
#           mask:
#             call:
#               name: "create_email"
#               paramsFromContext:
#                 - "nom"
#                 - "prenom"
#       EOF
#   - script: |-
#       echo '{"nom": "dupont", "prenom": "sophie", "email": ""}' | pimo
#     assertions:
#     - result.code ShouldEqual 0
#     - result.systemoutjson.email ShouldEqual dupont.sophie@email.com
#     - result.systemerr ShouldBeEmpty

