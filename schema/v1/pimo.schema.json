{
  "$schema": "http://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/cgi-fr/pimo/pkg/model/definition",
  "$ref": "#/$defs/Definition",
  "$defs": {
    "CacheDefinition": {
      "properties": {
        "Unique": {
          "type": "boolean",
          "description": "The cache will not allow a masked value to be used multiple times, the mask will be reapplied until a unique value is generated"
        },
        "Reverse": {
          "type": "boolean",
          "description": "Reverse the cache, keys will be used as values, and values will be used as keys"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Unique",
        "Reverse"
      ]
    },
    "Class": {
      "properties": {
        "Input": {
          "type": "string",
          "description": "Characters to replace in the input value"
        },
        "Output": {
          "type": "string",
          "description": "Characters to use to generate the output value"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Input",
        "Output"
      ]
    },
    "DateParserType": {
      "properties": {
        "InputFormat": {
          "type": "string",
          "description": "Format of the input datetime, it should always display the following date : Mon Jan 2 15:04:05 -0700 MST 2006 or the constant value 'unixEpoch'"
        },
        "OutputFormat": {
          "type": "string",
          "description": "Format of the output datetime, it should always display the following date : Mon Jan 2 15:04:05 -0700 MST 2006 or the constant value 'unixEpoch'"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "InputFormat",
        "OutputFormat"
      ]
    },
    "Definition": {
      "properties": {
        "Version": {
          "type": "string",
          "description": "Version of the pipeline definition, use the value 1"
        },
        "Seed": {
          "type": "integer",
          "description": "Initialize the Pseaudo-Random-Generator with the given value"
        },
        "Masking": {
          "items": {
            "$ref": "#/$defs/Masking"
          },
          "type": "array",
          "description": "Masking pipeline definition"
        },
        "Caches": {
          "patternProperties": {
            ".*": {
              "$ref": "#/$defs/CacheDefinition"
            }
          },
          "type": "object",
          "description": "Declare in-memory caches"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Version",
        "Seed",
        "Masking",
        "Caches"
      ]
    },
    "FF1Type": {
      "properties": {
        "KeyFromEnv": {
          "type": "string",
          "description": "Name of the system environment variable that contains the private key"
        },
        "TweakField": {
          "type": "string",
          "description": "Name of the field to use as 'tweak' value : reduce the attack surface by using a varying value on each record, it can be considered as an extension of the secret key that change on each record"
        },
        "Radix": {
          "type": "integer",
          "description": "determine which part of the fixed FF1 domain definition will actually be used, for example 10 will use the first 10 characters of 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        },
        "Decrypt": {
          "type": "boolean",
          "description": "Decrypt the value instead of encrypt"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "KeyFromEnv",
        "TweakField",
        "Radix",
        "Decrypt"
      ]
    },
    "IncrementalType": {
      "properties": {
        "Start": {
          "type": "integer",
          "description": "First value in the sequence"
        },
        "Increment": {
          "type": "integer",
          "description": "Increment to add to reach the next value in the sequence"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Start",
        "Increment"
      ]
    },
    "LuhnType": {
      "properties": {
        "Universe": {
          "type": "string",
          "description": "All possible characters that can be encountered as input value"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Universe"
      ]
    },
    "MarkovType": {
      "properties": {
        "MaxSize": {
          "type": "integer",
          "description": "Maximum length for the generated text"
        },
        "Sample": {
          "type": "string",
          "description": "URI to an external resource to train the Markiv model"
        },
        "Separator": {
          "type": "string",
          "description": "Separator to use to read tokens, leave empty to treat each character as a token"
        },
        "Order": {
          "type": "integer",
          "description": "Number of tokens to consider, a higher value = more similar to sample, too high and the generated text will be completly similar to sample"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "MaxSize",
        "Sample",
        "Separator",
        "Order"
      ]
    },
    "MaskType": {
      "oneOf": [
        {
          "required": [
            "Add"
          ],
          "title": "Add"
        },
        {
          "required": [
            "AddTransient"
          ],
          "title": "AddTransient"
        },
        {
          "required": [
            "Constant"
          ],
          "title": "Constant"
        },
        {
          "required": [
            "RandomChoice"
          ],
          "title": "RandomChoice"
        },
        {
          "required": [
            "RandomChoiceInURI"
          ],
          "title": "RandomChoiceInURI"
        },
        {
          "required": [
            "Command"
          ],
          "title": "Command"
        },
        {
          "required": [
            "RandomInt"
          ],
          "title": "RandomInt"
        },
        {
          "required": [
            "WeightedChoice"
          ],
          "title": "WeightedChoice"
        },
        {
          "required": [
            "Regex"
          ],
          "title": "Regex"
        },
        {
          "required": [
            "Hash"
          ],
          "title": "Hash"
        },
        {
          "required": [
            "HashInURI"
          ],
          "title": "HashInURI"
        },
        {
          "required": [
            "RandDate"
          ],
          "title": "RandDate"
        },
        {
          "required": [
            "Incremental"
          ],
          "title": "Incremental"
        },
        {
          "required": [
            "Replacement"
          ],
          "title": "Replacement"
        },
        {
          "required": [
            "Template"
          ],
          "title": "Template"
        },
        {
          "required": [
            "TemplateEach"
          ],
          "title": "TemplateEach"
        },
        {
          "required": [
            "Duration"
          ],
          "title": "Duration"
        },
        {
          "required": [
            "Remove"
          ],
          "title": "Remove"
        },
        {
          "required": [
            "RangeMask"
          ],
          "title": "RangeMask"
        },
        {
          "required": [
            "RandomDuration"
          ],
          "title": "RandomDuration"
        },
        {
          "required": [
            "FluxURI"
          ],
          "title": "FluxURI"
        },
        {
          "required": [
            "RandomDecimal"
          ],
          "title": "RandomDecimal"
        },
        {
          "required": [
            "DateParser"
          ],
          "title": "DateParser"
        },
        {
          "required": [
            "FromCache"
          ],
          "title": "FromCache"
        },
        {
          "required": [
            "FF1"
          ],
          "title": "FF1"
        },
        {
          "required": [
            "Pipe"
          ],
          "title": "Pipe"
        },
        {
          "required": [
            "FromJSON"
          ],
          "title": "FromJSON"
        },
        {
          "required": [
            "Luhn"
          ],
          "title": "Luhn"
        },
        {
          "required": [
            "Markov"
          ],
          "title": "Markov"
        },
        {
          "required": [
            "Transcode"
          ],
          "title": "Transcode"
        }
      ],
      "properties": {
        "Add": {
          "title": "Add Mask",
          "description": "Add a new field in the JSON stream"
        },
        "AddTransient": {
          "title": "Add Transient Mask",
          "description": "Add a new temporary field, that will not show in the JSON output"
        },
        "Constant": {
          "title": "Constant Mask",
          "description": "Replace the input value with a constant field"
        },
        "RandomChoice": {
          "items": true,
          "type": "array",
          "title": "Random Choice Mask",
          "description": "Replace the input value with a value chosen randomly from a constant list"
        },
        "RandomChoiceInURI": {
          "type": "string",
          "title": "Random Choice in URI",
          "description": "Replace the input value with a value chosen randomly from an external resource (1 line = 1 value)"
        },
        "Command": {
          "type": "string",
          "title": "Command Mask",
          "description": "Replace the input value with the result of the given system command"
        },
        "RandomInt": {
          "$ref": "#/$defs/RandIntType",
          "title": "Random Integer Mask",
          "description": "Replace the input value with a value chosen randomly from an integer range"
        },
        "WeightedChoice": {
          "items": {
            "$ref": "#/$defs/WeightedChoiceType"
          },
          "type": "array",
          "title": "Weighted Choice Mask",
          "description": "Replace the input value with a value chosen randomly from a constant list, each value is given a weight (higher weight value has higher chance to be selected)"
        },
        "Regex": {
          "type": "string",
          "title": "Regex Mask",
          "description": "Replace the input value with a random generated value that match the given regular expression"
        },
        "Hash": {
          "items": true,
          "type": "array",
          "title": "Hash Mask",
          "description": "Replace the input value with a value chosen deterministicly from a constant list, the same input will always be replaced by the same output"
        },
        "HashInURI": {
          "type": "string",
          "title": "Hash in URI Mask",
          "description": "Replace the input value with a value chosen deterministicly from an external resource (1 line = 1 value), the same input will always be replaced by the same output"
        },
        "RandDate": {
          "$ref": "#/$defs/RandDateType",
          "title": "Random Date Mask",
          "description": "Replace the input value with a value chosen randomly from an date range"
        },
        "Incremental": {
          "$ref": "#/$defs/IncrementalType",
          "title": "Incremental Mask",
          "description": "Replace the input value with an incrementing integer sequence"
        },
        "Replacement": {
          "type": "string",
          "title": "Replacement Mask",
          "description": "Replace the input value with the value of another field"
        },
        "Template": {
          "type": "string",
          "title": "Template Mask",
          "description": "Replace the input value with the result of executing the given Golang template"
        },
        "TemplateEach": {
          "$ref": "#/$defs/TemplateEachType",
          "title": "Template Each Mask",
          "description": "Replace all input values (selector must be an array field) with the result of executing the given Golang template on each value"
        },
        "Duration": {
          "type": "string",
          "title": "Duration Mask",
          "description": "Modify the input value (selector must be a date field) increasing or decreasing by the given amount of time"
        },
        "Remove": {
          "type": "boolean",
          "title": "Remove Mask",
          "description": "Remove the field from the JSON stream"
        },
        "RangeMask": {
          "type": "integer",
          "title": "Range Mask",
          "description": "Replace the integer value with a range of the given size"
        },
        "RandomDuration": {
          "$ref": "#/$defs/RandomDurationType",
          "title": "Random Duration Mask",
          "description": "Modify the input value (selector must be a date field) increasing or decreasing by a random amount of time"
        },
        "FluxURI": {
          "type": "string",
          "title": "Flux in URI Mask",
          "description": "Replace the input value with the next value in the sequence given by an external resource (1 line = 1 value)"
        },
        "RandomDecimal": {
          "$ref": "#/$defs/RandomDecimalType",
          "title": "Random Decimal Mask",
          "description": "Replace the input value with a value chosen randomly from an decimal range"
        },
        "DateParser": {
          "$ref": "#/$defs/DateParserType",
          "title": "Date Parser Mask",
          "description": "Change the format of the input date"
        },
        "FromCache": {
          "type": "string",
          "title": "From Cache Mask",
          "description": "Replace the input value with the value stored at the corresponding key in the given cache"
        },
        "FF1": {
          "$ref": "#/$defs/FF1Type",
          "title": "FF1 Mask",
          "description": "Encrypt the input value using the FF1 algorithm (format preserving encryption)"
        },
        "Pipe": {
          "$ref": "#/$defs/PipeType",
          "title": "Pipe Mask",
          "description": "If the input value contains an array of object, stream each object with the given masking pipeline definition, this mask exists to handle complex data structures"
        },
        "FromJSON": {
          "type": "string",
          "title": "From JSON Mask",
          "description": "Parse the input value as raw JSON, and add the resulting structure to the JSON stream"
        },
        "Luhn": {
          "$ref": "#/$defs/LuhnType",
          "title": "Luhn Mask",
          "description": "Concatenate a checksum key to the input value computed with the luhn algorithm"
        },
        "Markov": {
          "$ref": "#/$defs/MarkovType",
          "title": "Markov Mask",
          "description": "Produces pseudo text based on sample text"
        },
        "Transcode": {
          "$ref": "#/$defs/TranscodeType",
          "title": "Transcode Mask",
          "description": "Produce a random string by preserving character classes from the original value"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Add",
        "AddTransient",
        "Constant",
        "RandomChoice",
        "RandomChoiceInURI",
        "Command",
        "RandomInt",
        "WeightedChoice",
        "Regex",
        "Hash",
        "HashInURI",
        "RandDate",
        "Incremental",
        "Replacement",
        "Template",
        "TemplateEach",
        "Duration",
        "Remove",
        "RangeMask",
        "RandomDuration",
        "FluxURI",
        "RandomDecimal",
        "DateParser",
        "FromCache",
        "FF1",
        "Pipe",
        "FromJSON",
        "Luhn",
        "Markov",
        "Transcode"
      ]
    },
    "Masking": {
      "oneOf": [
        {
          "required": [
            "Selector",
            "Mask"
          ],
          "title": "case1"
        },
        {
          "required": [
            "Selector",
            "Masks"
          ],
          "title": "case2"
        },
        {
          "required": [
            "Selectors",
            "Mask"
          ],
          "title": "case3"
        },
        {
          "required": [
            "Selectors",
            "Masks"
          ],
          "title": "case4"
        }
      ],
      "properties": {
        "Selector": {
          "$ref": "#/$defs/SelectorType",
          "description": "A selector defines on which field the mask will be applied"
        },
        "Selectors": {
          "items": {
            "$ref": "#/$defs/SelectorType"
          },
          "type": "array",
          "description": "Defines on which fields the mask will be applied"
        },
        "Mask": {
          "$ref": "#/$defs/MaskType",
          "description": "Defines how the selected value(s) will be masked"
        },
        "Masks": {
          "items": {
            "$ref": "#/$defs/MaskType"
          },
          "type": "array",
          "description": "Defines how the selected value(s) will be masked"
        },
        "Cache": {
          "type": "string",
          "description": "Use an in-memory cache to preserve coherence between original/masked values"
        },
        "Preserve": {
          "type": "string",
          "enum": [
            "null",
            "empty",
            "blank"
          ],
          "description": "Preserve (do not mask) some values : null = preserve null value, empty = preserve empty strings, blank = preserve both null and empty values"
        },
        "Seed": {
          "$ref": "#/$defs/SeedType",
          "description": "Initialize the Pseaudo-Random-Generator with the value given field"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Selector",
        "Selectors",
        "Mask",
        "Masks",
        "Cache",
        "Preserve",
        "Seed"
      ]
    },
    "PipeType": {
      "properties": {
        "Masking": {
          "items": {
            "$ref": "#/$defs/Masking"
          },
          "type": "array",
          "description": "Define a list of selector/mask couple to apply on the JSON stream, in this order"
        },
        "InjectParent": {
          "type": "string",
          "description": "Used in conjunction with the 'pipe' mask, inject the parent object with the given field name"
        },
        "InjectRoot": {
          "type": "string",
          "description": "Used in conjunction with the 'pipe' mask, inject the root object with the given field name"
        },
        "DefinitionFile": {
          "type": "string",
          "description": "URI to an external resource to read the pipeline definition"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Masking",
        "InjectParent",
        "InjectRoot",
        "DefinitionFile"
      ]
    },
    "RandDateType": {
      "properties": {
        "DateMin": {
          "type": "string",
          "format": "date-time",
          "description": "Lower bound of the date range"
        },
        "DateMax": {
          "type": "string",
          "format": "date-time",
          "description": "Higher bound of the date range"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "DateMin",
        "DateMax"
      ]
    },
    "RandIntType": {
      "properties": {
        "Min": {
          "type": "integer",
          "description": "Lower bound of the integer range"
        },
        "Max": {
          "type": "integer",
          "description": "Lower bound of the integer range"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Min",
        "Max"
      ]
    },
    "RandomDecimalType": {
      "properties": {
        "Min": {
          "type": "number",
          "description": "Lower bound of the decimal range"
        },
        "Max": {
          "type": "number",
          "description": "Lower bound of the decimal range"
        },
        "Precision": {
          "type": "integer",
          "description": "Precision of the generated value"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Min",
        "Max",
        "Precision"
      ]
    },
    "RandomDurationType": {
      "properties": {
        "Min": {
          "type": "string",
          "description": "Lower bound of the duration range (ISO 8601 notation)"
        },
        "Max": {
          "type": "string",
          "description": "Higher bound of the duration range (ISO 8601 notation)"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Min",
        "Max"
      ]
    },
    "SeedType": {
      "properties": {
        "Field": {
          "type": "string",
          "description": "Initialize the Pseaudo-Random-Generator with the given field value, a Golang Template can be used here"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Field"
      ]
    },
    "SelectorType": {
      "properties": {
        "Jsonpath": {
          "type": "string",
          "description": "Path of the target value to mask in the JSON input"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Jsonpath"
      ]
    },
    "TemplateEachType": {
      "properties": {
        "Item": {
          "type": "string",
          "description": "Inject the current element value under the given field name"
        },
        "Index": {
          "type": "string",
          "description": "Inject the current element index under the given field name"
        },
        "Template": {
          "type": "string",
          "description": "Replace the current value with the result of executing this Golang template"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Item",
        "Index",
        "Template"
      ]
    },
    "TranscodeType": {
      "properties": {
        "Classes": {
          "items": {
            "$ref": "#/$defs/Class"
          },
          "type": "array",
          "description": "Each class will define a rule to replace a set of characters by another"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Classes"
      ]
    },
    "WeightedChoiceType": {
      "properties": {
        "Choice": {
          "description": "Value for this choice"
        },
        "Weight": {
          "type": "integer",
          "description": "Weight of this choice, higher weights will be selected more frequently"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "Choice",
        "Weight"
      ]
    }
  }
}
